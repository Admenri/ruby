// This file is @generated by src/gen_hir_type.rb.
mod bits {
  pub const Array: u64 = ArrayExact | ArrayUser;
  pub const ArrayExact: u64 = 1u64 << 0;
  pub const ArrayUser: u64 = 1u64 << 1;
  pub const Bignum: u64 = 1u64 << 2;
  pub const Bottom: u64 = 0u64;
  pub const BuiltinExact: u64 = ArrayExact | FalseClassExact | FloatExact | HashExact | IntegerExact | NilClassExact | StringExact | SymbolExact | TrueClassExact;
  pub const CBool: u64 = 1u64 << 3;
  pub const CDouble: u64 = 1u64 << 4;
  pub const CInt: u64 = CSigned | CUnsigned;
  pub const CInt16: u64 = 1u64 << 5;
  pub const CInt32: u64 = 1u64 << 6;
  pub const CInt64: u64 = 1u64 << 7;
  pub const CInt8: u64 = 1u64 << 8;
  pub const CNull: u64 = 1u64 << 9;
  pub const CPtr: u64 = 1u64 << 10;
  pub const CSigned: u64 = CInt16 | CInt32 | CInt64 | CInt8;
  pub const CUInt16: u64 = 1u64 << 11;
  pub const CUInt32: u64 = 1u64 << 12;
  pub const CUInt64: u64 = 1u64 << 13;
  pub const CUInt8: u64 = 1u64 << 14;
  pub const CUnsigned: u64 = CUInt16 | CUInt32 | CUInt64 | CUInt8;
  pub const DynamicSymbol: u64 = 1u64 << 15;
  pub const FalseClass: u64 = FalseClassExact | FalseClassUser;
  pub const FalseClassExact: u64 = 1u64 << 16;
  pub const FalseClassUser: u64 = 1u64 << 17;
  pub const Fixnum: u64 = 1u64 << 18;
  pub const Float: u64 = FloatExact | FloatUser;
  pub const FloatExact: u64 = Flonum | HeapFloat;
  pub const FloatUser: u64 = 1u64 << 19;
  pub const Flonum: u64 = 1u64 << 20;
  pub const Hash: u64 = HashExact | HashUser;
  pub const HashExact: u64 = 1u64 << 21;
  pub const HashUser: u64 = 1u64 << 22;
  pub const HeapFloat: u64 = 1u64 << 23;
  pub const Integer: u64 = IntegerExact | IntegerUser;
  pub const IntegerExact: u64 = Bignum | Fixnum;
  pub const IntegerUser: u64 = 1u64 << 24;
  pub const NilClass: u64 = NilClassExact | NilClassUser;
  pub const NilClassExact: u64 = 1u64 << 25;
  pub const NilClassUser: u64 = 1u64 << 26;
  pub const Object: u64 = BuiltinExact | ObjectExact | ObjectUser;
  pub const ObjectExact: u64 = 1u64 << 27;
  pub const ObjectUser: u64 = Array | FalseClass | Float | Hash | Integer | NilClass | String | Symbol | TrueClass;
  pub const Primitive: u64 = CBool | CDouble | CInt | CNull | CPtr;
  pub const StaticSymbol: u64 = 1u64 << 28;
  pub const String: u64 = StringExact | StringUser;
  pub const StringExact: u64 = 1u64 << 29;
  pub const StringUser: u64 = 1u64 << 30;
  pub const Symbol: u64 = SymbolExact | SymbolUser;
  pub const SymbolExact: u64 = DynamicSymbol | StaticSymbol;
  pub const SymbolUser: u64 = 1u64 << 31;
  pub const Top: u64 = Object | Primitive | User;
  pub const TrueClass: u64 = TrueClassExact | TrueClassUser;
  pub const TrueClassExact: u64 = 1u64 << 32;
  pub const TrueClassUser: u64 = 1u64 << 33;
  pub const User: u64 = ArrayUser | FalseClassUser | FloatUser | HashUser | IntegerUser | NilClassUser | StringUser | SymbolUser | TrueClassUser;
  pub const AllBitPatterns: [(&'static str, u64); 56] = [
    ("Top", Top),
    ("Object", Object),
    ("ObjectUser", ObjectUser),
    ("TrueClass", TrueClass),
    ("User", User),
    ("TrueClassUser", TrueClassUser),
    ("BuiltinExact", BuiltinExact),
    ("TrueClassExact", TrueClassExact),
    ("Symbol", Symbol),
    ("SymbolUser", SymbolUser),
    ("String", String),
    ("StringUser", StringUser),
    ("StringExact", StringExact),
    ("SymbolExact", SymbolExact),
    ("StaticSymbol", StaticSymbol),
    ("ObjectExact", ObjectExact),
    ("NilClass", NilClass),
    ("NilClassUser", NilClassUser),
    ("NilClassExact", NilClassExact),
    ("Integer", Integer),
    ("IntegerUser", IntegerUser),
    ("Float", Float),
    ("FloatExact", FloatExact),
    ("HeapFloat", HeapFloat),
    ("Hash", Hash),
    ("HashUser", HashUser),
    ("HashExact", HashExact),
    ("Flonum", Flonum),
    ("FloatUser", FloatUser),
    ("IntegerExact", IntegerExact),
    ("Fixnum", Fixnum),
    ("FalseClass", FalseClass),
    ("FalseClassUser", FalseClassUser),
    ("FalseClassExact", FalseClassExact),
    ("DynamicSymbol", DynamicSymbol),
    ("Primitive", Primitive),
    ("CInt", CInt),
    ("CUnsigned", CUnsigned),
    ("CUInt8", CUInt8),
    ("CUInt64", CUInt64),
    ("CUInt32", CUInt32),
    ("CUInt16", CUInt16),
    ("CPtr", CPtr),
    ("CNull", CNull),
    ("CSigned", CSigned),
    ("CInt8", CInt8),
    ("CInt64", CInt64),
    ("CInt32", CInt32),
    ("CInt16", CInt16),
    ("CDouble", CDouble),
    ("CBool", CBool),
    ("Bignum", Bignum),
    ("Array", Array),
    ("ArrayUser", ArrayUser),
    ("ArrayExact", ArrayExact),
    ("Bottom", Bottom),
  ];
  pub const NumTypeBits: u64 = 34;
}
pub mod types {
  use super::*;
  pub const Array: Type = Type::from_bits(bits::Array);
  pub const ArrayExact: Type = Type::from_bits(bits::ArrayExact);
  pub const ArrayUser: Type = Type::from_bits(bits::ArrayUser);
  pub const Bignum: Type = Type::from_bits(bits::Bignum);
  pub const Bottom: Type = Type::from_bits(bits::Bottom);
  pub const BuiltinExact: Type = Type::from_bits(bits::BuiltinExact);
  pub const CBool: Type = Type::from_bits(bits::CBool);
  pub const CDouble: Type = Type::from_bits(bits::CDouble);
  pub const CInt: Type = Type::from_bits(bits::CInt);
  pub const CInt16: Type = Type::from_bits(bits::CInt16);
  pub const CInt32: Type = Type::from_bits(bits::CInt32);
  pub const CInt64: Type = Type::from_bits(bits::CInt64);
  pub const CInt8: Type = Type::from_bits(bits::CInt8);
  pub const CNull: Type = Type::from_bits(bits::CNull);
  pub const CPtr: Type = Type::from_bits(bits::CPtr);
  pub const CSigned: Type = Type::from_bits(bits::CSigned);
  pub const CUInt16: Type = Type::from_bits(bits::CUInt16);
  pub const CUInt32: Type = Type::from_bits(bits::CUInt32);
  pub const CUInt64: Type = Type::from_bits(bits::CUInt64);
  pub const CUInt8: Type = Type::from_bits(bits::CUInt8);
  pub const CUnsigned: Type = Type::from_bits(bits::CUnsigned);
  pub const DynamicSymbol: Type = Type::from_bits(bits::DynamicSymbol);
  pub const FalseClass: Type = Type::from_bits(bits::FalseClass);
  pub const FalseClassExact: Type = Type::from_bits(bits::FalseClassExact);
  pub const FalseClassUser: Type = Type::from_bits(bits::FalseClassUser);
  pub const Fixnum: Type = Type::from_bits(bits::Fixnum);
  pub const Float: Type = Type::from_bits(bits::Float);
  pub const FloatExact: Type = Type::from_bits(bits::FloatExact);
  pub const FloatUser: Type = Type::from_bits(bits::FloatUser);
  pub const Flonum: Type = Type::from_bits(bits::Flonum);
  pub const Hash: Type = Type::from_bits(bits::Hash);
  pub const HashExact: Type = Type::from_bits(bits::HashExact);
  pub const HashUser: Type = Type::from_bits(bits::HashUser);
  pub const HeapFloat: Type = Type::from_bits(bits::HeapFloat);
  pub const Integer: Type = Type::from_bits(bits::Integer);
  pub const IntegerExact: Type = Type::from_bits(bits::IntegerExact);
  pub const IntegerUser: Type = Type::from_bits(bits::IntegerUser);
  pub const NilClass: Type = Type::from_bits(bits::NilClass);
  pub const NilClassExact: Type = Type::from_bits(bits::NilClassExact);
  pub const NilClassUser: Type = Type::from_bits(bits::NilClassUser);
  pub const Object: Type = Type::from_bits(bits::Object);
  pub const ObjectExact: Type = Type::from_bits(bits::ObjectExact);
  pub const ObjectUser: Type = Type::from_bits(bits::ObjectUser);
  pub const Primitive: Type = Type::from_bits(bits::Primitive);
  pub const StaticSymbol: Type = Type::from_bits(bits::StaticSymbol);
  pub const String: Type = Type::from_bits(bits::String);
  pub const StringExact: Type = Type::from_bits(bits::StringExact);
  pub const StringUser: Type = Type::from_bits(bits::StringUser);
  pub const Symbol: Type = Type::from_bits(bits::Symbol);
  pub const SymbolExact: Type = Type::from_bits(bits::SymbolExact);
  pub const SymbolUser: Type = Type::from_bits(bits::SymbolUser);
  pub const Top: Type = Type::from_bits(bits::Top);
  pub const TrueClass: Type = Type::from_bits(bits::TrueClass);
  pub const TrueClassExact: Type = Type::from_bits(bits::TrueClassExact);
  pub const TrueClassUser: Type = Type::from_bits(bits::TrueClassUser);
  pub const User: Type = Type::from_bits(bits::User);
}
